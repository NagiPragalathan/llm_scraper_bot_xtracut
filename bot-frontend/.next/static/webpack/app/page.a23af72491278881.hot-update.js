"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/./services/api.ts":
/*!*************************!*\
  !*** ./services/api.ts ***!
  \*************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   checkHealth: () => (/* binding */ checkHealth),\n/* harmony export */   sendMessage: () => (/* binding */ sendMessage)\n/* harmony export */ });\nconst API_URL = 'http://localhost:5000';\n// Mock responses for when the backend is unavailable\nconst mockResponses = [\n    \"I'm sorry, but I'm currently running in offline mode. The backend server is not available.\",\n    \"It seems the backend server is not running. I'm operating in fallback mode with limited capabilities.\",\n    \"I can't connect to the backend server right now. Please check if it's running at http://localhost:5000.\",\n    \"I'm in offline mode. To get full functionality, please make sure the backend server is running.\",\n    \"Backend connection failed. I'm providing a simulated response since I can't reach the server.\"\n];\nconst sendMessage = async function(message) {\n    let sessionId = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : null, messages = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];\n    // Convert our frontend message format to the backend format\n    const messageHistory = messages.map((msg)=>({\n            role: msg.role,\n            content: msg.content\n        }));\n    const payload = {\n        message,\n        session_id: sessionId || undefined,\n        stream: true,\n        messages: messageHistory\n    };\n    try {\n        const response = await fetch(\"\".concat(API_URL, \"/api/chat\"), {\n            method: 'POST',\n            headers: {\n                'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(payload)\n        });\n        return response;\n    } catch (error) {\n        console.error('Failed to connect to backend:', error);\n        // Create a mock response with a random message from our fallback responses\n        const mockResponse = mockResponses[Math.floor(Math.random() * mockResponses.length)];\n        // Create a ReadableStream to simulate the streaming response\n        const encoder = new TextEncoder();\n        const stream = new ReadableStream({\n            start (controller) {\n                // Add a small delay to simulate network latency\n                setTimeout(()=>{\n                    controller.enqueue(encoder.encode(\"data: \".concat(mockResponse, \"\\n\\n\")));\n                    controller.close();\n                }, 500);\n            }\n        });\n        // Return a mock Response object\n        return new Response(stream, {\n            headers: {\n                'Content-Type': 'text/event-stream',\n                'Cache-Control': 'no-cache',\n                'Connection': 'keep-alive'\n            },\n            status: 200\n        });\n    }\n};\nconst checkHealth = async ()=>{\n    try {\n        const response = await fetch(\"\".concat(API_URL, \"/api/health\"), {\n            // Add a timeout to prevent long waiting times\n            signal: AbortSignal.timeout(3000)\n        });\n        const data = await response.json();\n        return data.status === 'healthy';\n    } catch (error) {\n        console.error('Health check failed:', error);\n        return false;\n    }\n};\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKGFwcC1wYWdlcy1icm93c2VyKS8uL3NlcnZpY2VzL2FwaS50cyIsIm1hcHBpbmdzIjoiOzs7OztBQWNBLE1BQU1BLFVBQVU7QUFFaEIscURBQXFEO0FBQ3JELE1BQU1DLGdCQUFnQjtJQUNwQjtJQUNBO0lBQ0E7SUFDQTtJQUNBO0NBQ0Q7QUFFTSxNQUFNQyxjQUFjLGVBQ3pCQztRQUNBQyw2RUFBMkIsTUFDM0JDLDRFQUFzQixFQUFFO0lBRXhCLDREQUE0RDtJQUM1RCxNQUFNQyxpQkFBaUJELFNBQVNFLEdBQUcsQ0FBQ0MsQ0FBQUEsTUFBUTtZQUMxQ0MsTUFBTUQsSUFBSUMsSUFBSTtZQUNkQyxTQUFTRixJQUFJRSxPQUFPO1FBQ3RCO0lBRUEsTUFBTUMsVUFBdUI7UUFDM0JSO1FBQ0FTLFlBQVlSLGFBQWFTO1FBQ3pCQyxRQUFRO1FBQ1JULFVBQVVDO0lBQ1o7SUFFQSxJQUFJO1FBQ0YsTUFBTVMsV0FBVyxNQUFNQyxNQUFNLEdBQVcsT0FBUmhCLFNBQVEsY0FBWTtZQUNsRGlCLFFBQVE7WUFDUkMsU0FBUztnQkFDUCxnQkFBZ0I7WUFDbEI7WUFDQUMsTUFBTUMsS0FBS0MsU0FBUyxDQUFDVjtRQUN2QjtRQUVBLE9BQU9JO0lBQ1QsRUFBRSxPQUFPTyxPQUFPO1FBQ2RDLFFBQVFELEtBQUssQ0FBQyxpQ0FBaUNBO1FBRS9DLDJFQUEyRTtRQUMzRSxNQUFNRSxlQUFldkIsYUFBYSxDQUFDd0IsS0FBS0MsS0FBSyxDQUFDRCxLQUFLRSxNQUFNLEtBQUsxQixjQUFjMkIsTUFBTSxFQUFFO1FBRXBGLDZEQUE2RDtRQUM3RCxNQUFNQyxVQUFVLElBQUlDO1FBQ3BCLE1BQU1oQixTQUFTLElBQUlpQixlQUFlO1lBQ2hDQyxPQUFNQyxVQUFVO2dCQUNkLGdEQUFnRDtnQkFDaERDLFdBQVc7b0JBQ1RELFdBQVdFLE9BQU8sQ0FBQ04sUUFBUU8sTUFBTSxDQUFDLFNBQXNCLE9BQWJaLGNBQWE7b0JBQ3hEUyxXQUFXSSxLQUFLO2dCQUNsQixHQUFHO1lBQ0w7UUFDRjtRQUVBLGdDQUFnQztRQUNoQyxPQUFPLElBQUlDLFNBQVN4QixRQUFRO1lBQzFCSSxTQUFTO2dCQUNQLGdCQUFnQjtnQkFDaEIsaUJBQWlCO2dCQUNqQixjQUFjO1lBQ2hCO1lBQ0FxQixRQUFRO1FBQ1Y7SUFDRjtBQUNGLEVBQUU7QUFFSyxNQUFNQyxjQUFjO0lBQ3pCLElBQUk7UUFDRixNQUFNekIsV0FBVyxNQUFNQyxNQUFNLEdBQVcsT0FBUmhCLFNBQVEsZ0JBQWM7WUFDcEQsOENBQThDO1lBQzlDeUMsUUFBUUMsWUFBWUMsT0FBTyxDQUFDO1FBQzlCO1FBQ0EsTUFBTUMsT0FBTyxNQUFNN0IsU0FBUzhCLElBQUk7UUFDaEMsT0FBT0QsS0FBS0wsTUFBTSxLQUFLO0lBQ3pCLEVBQUUsT0FBT2pCLE9BQU87UUFDZEMsUUFBUUQsS0FBSyxDQUFDLHdCQUF3QkE7UUFDdEMsT0FBTztJQUNUO0FBQ0YsRUFBRSIsInNvdXJjZXMiOlsiQzpcXFVzZXJzXFxBZG1pblxcRG9jdW1lbnRzXFxXb3JrXFxMZWFybnNcXExMTVxcc2NyYXBlcl9ib3RcXGJvdC1mcm9udGVuZFxcc2VydmljZXNcXGFwaS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbnRlcmZhY2UgTWVzc2FnZSB7XHJcbiAgaWQ6IG51bWJlcjtcclxuICBjb250ZW50OiBzdHJpbmc7XHJcbiAgcm9sZTogJ3VzZXInIHwgJ2Fzc2lzdGFudCc7XHJcbiAgdGltZXN0YW1wOiBEYXRlO1xyXG59XHJcblxyXG5pbnRlcmZhY2UgQ2hhdFJlcXVlc3Qge1xyXG4gIG1lc3NhZ2U6IHN0cmluZztcclxuICBzZXNzaW9uX2lkPzogc3RyaW5nO1xyXG4gIHN0cmVhbTogYm9vbGVhbjtcclxuICBtZXNzYWdlczogeyByb2xlOiBzdHJpbmc7IGNvbnRlbnQ6IHN0cmluZyB9W107XHJcbn1cclxuXHJcbmNvbnN0IEFQSV9VUkwgPSAnaHR0cDovL2xvY2FsaG9zdDo1MDAwJztcclxuXHJcbi8vIE1vY2sgcmVzcG9uc2VzIGZvciB3aGVuIHRoZSBiYWNrZW5kIGlzIHVuYXZhaWxhYmxlXHJcbmNvbnN0IG1vY2tSZXNwb25zZXMgPSBbXHJcbiAgXCJJJ20gc29ycnksIGJ1dCBJJ20gY3VycmVudGx5IHJ1bm5pbmcgaW4gb2ZmbGluZSBtb2RlLiBUaGUgYmFja2VuZCBzZXJ2ZXIgaXMgbm90IGF2YWlsYWJsZS5cIixcclxuICBcIkl0IHNlZW1zIHRoZSBiYWNrZW5kIHNlcnZlciBpcyBub3QgcnVubmluZy4gSSdtIG9wZXJhdGluZyBpbiBmYWxsYmFjayBtb2RlIHdpdGggbGltaXRlZCBjYXBhYmlsaXRpZXMuXCIsXHJcbiAgXCJJIGNhbid0IGNvbm5lY3QgdG8gdGhlIGJhY2tlbmQgc2VydmVyIHJpZ2h0IG5vdy4gUGxlYXNlIGNoZWNrIGlmIGl0J3MgcnVubmluZyBhdCBodHRwOi8vbG9jYWxob3N0OjUwMDAuXCIsXHJcbiAgXCJJJ20gaW4gb2ZmbGluZSBtb2RlLiBUbyBnZXQgZnVsbCBmdW5jdGlvbmFsaXR5LCBwbGVhc2UgbWFrZSBzdXJlIHRoZSBiYWNrZW5kIHNlcnZlciBpcyBydW5uaW5nLlwiLFxyXG4gIFwiQmFja2VuZCBjb25uZWN0aW9uIGZhaWxlZC4gSSdtIHByb3ZpZGluZyBhIHNpbXVsYXRlZCByZXNwb25zZSBzaW5jZSBJIGNhbid0IHJlYWNoIHRoZSBzZXJ2ZXIuXCJcclxuXTtcclxuXHJcbmV4cG9ydCBjb25zdCBzZW5kTWVzc2FnZSA9IGFzeW5jIChcclxuICBtZXNzYWdlOiBzdHJpbmcsIFxyXG4gIHNlc3Npb25JZDogc3RyaW5nIHwgbnVsbCA9IG51bGwsXHJcbiAgbWVzc2FnZXM6IE1lc3NhZ2VbXSA9IFtdXHJcbik6IFByb21pc2U8UmVzcG9uc2U+ID0+IHtcclxuICAvLyBDb252ZXJ0IG91ciBmcm9udGVuZCBtZXNzYWdlIGZvcm1hdCB0byB0aGUgYmFja2VuZCBmb3JtYXRcclxuICBjb25zdCBtZXNzYWdlSGlzdG9yeSA9IG1lc3NhZ2VzLm1hcChtc2cgPT4gKHtcclxuICAgIHJvbGU6IG1zZy5yb2xlLFxyXG4gICAgY29udGVudDogbXNnLmNvbnRlbnRcclxuICB9KSk7XHJcblxyXG4gIGNvbnN0IHBheWxvYWQ6IENoYXRSZXF1ZXN0ID0ge1xyXG4gICAgbWVzc2FnZSxcclxuICAgIHNlc3Npb25faWQ6IHNlc3Npb25JZCB8fCB1bmRlZmluZWQsXHJcbiAgICBzdHJlYW06IHRydWUsXHJcbiAgICBtZXNzYWdlczogbWVzc2FnZUhpc3RvcnlcclxuICB9O1xyXG5cclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfVVJMfS9hcGkvY2hhdGAsIHtcclxuICAgICAgbWV0aG9kOiAnUE9TVCcsXHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ2FwcGxpY2F0aW9uL2pzb24nLFxyXG4gICAgICB9LFxyXG4gICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShwYXlsb2FkKVxyXG4gICAgfSk7XHJcbiAgICBcclxuICAgIHJldHVybiByZXNwb25zZTtcclxuICB9IGNhdGNoIChlcnJvcikge1xyXG4gICAgY29uc29sZS5lcnJvcignRmFpbGVkIHRvIGNvbm5lY3QgdG8gYmFja2VuZDonLCBlcnJvcik7XHJcbiAgICBcclxuICAgIC8vIENyZWF0ZSBhIG1vY2sgcmVzcG9uc2Ugd2l0aCBhIHJhbmRvbSBtZXNzYWdlIGZyb20gb3VyIGZhbGxiYWNrIHJlc3BvbnNlc1xyXG4gICAgY29uc3QgbW9ja1Jlc3BvbnNlID0gbW9ja1Jlc3BvbnNlc1tNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiBtb2NrUmVzcG9uc2VzLmxlbmd0aCldO1xyXG4gICAgXHJcbiAgICAvLyBDcmVhdGUgYSBSZWFkYWJsZVN0cmVhbSB0byBzaW11bGF0ZSB0aGUgc3RyZWFtaW5nIHJlc3BvbnNlXHJcbiAgICBjb25zdCBlbmNvZGVyID0gbmV3IFRleHRFbmNvZGVyKCk7XHJcbiAgICBjb25zdCBzdHJlYW0gPSBuZXcgUmVhZGFibGVTdHJlYW0oe1xyXG4gICAgICBzdGFydChjb250cm9sbGVyKSB7XHJcbiAgICAgICAgLy8gQWRkIGEgc21hbGwgZGVsYXkgdG8gc2ltdWxhdGUgbmV0d29yayBsYXRlbmN5XHJcbiAgICAgICAgc2V0VGltZW91dCgoKSA9PiB7XHJcbiAgICAgICAgICBjb250cm9sbGVyLmVucXVldWUoZW5jb2Rlci5lbmNvZGUoYGRhdGE6ICR7bW9ja1Jlc3BvbnNlfVxcblxcbmApKTtcclxuICAgICAgICAgIGNvbnRyb2xsZXIuY2xvc2UoKTtcclxuICAgICAgICB9LCA1MDApO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIFxyXG4gICAgLy8gUmV0dXJuIGEgbW9jayBSZXNwb25zZSBvYmplY3RcclxuICAgIHJldHVybiBuZXcgUmVzcG9uc2Uoc3RyZWFtLCB7XHJcbiAgICAgIGhlYWRlcnM6IHtcclxuICAgICAgICAnQ29udGVudC1UeXBlJzogJ3RleHQvZXZlbnQtc3RyZWFtJyxcclxuICAgICAgICAnQ2FjaGUtQ29udHJvbCc6ICduby1jYWNoZScsXHJcbiAgICAgICAgJ0Nvbm5lY3Rpb24nOiAna2VlcC1hbGl2ZSdcclxuICAgICAgfSxcclxuICAgICAgc3RhdHVzOiAyMDBcclxuICAgIH0pO1xyXG4gIH1cclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBjaGVja0hlYWx0aCA9IGFzeW5jICgpOiBQcm9taXNlPGJvb2xlYW4+ID0+IHtcclxuICB0cnkge1xyXG4gICAgY29uc3QgcmVzcG9uc2UgPSBhd2FpdCBmZXRjaChgJHtBUElfVVJMfS9hcGkvaGVhbHRoYCwge1xyXG4gICAgICAvLyBBZGQgYSB0aW1lb3V0IHRvIHByZXZlbnQgbG9uZyB3YWl0aW5nIHRpbWVzXHJcbiAgICAgIHNpZ25hbDogQWJvcnRTaWduYWwudGltZW91dCgzMDAwKVxyXG4gICAgfSk7XHJcbiAgICBjb25zdCBkYXRhID0gYXdhaXQgcmVzcG9uc2UuanNvbigpO1xyXG4gICAgcmV0dXJuIGRhdGEuc3RhdHVzID09PSAnaGVhbHRoeSc7XHJcbiAgfSBjYXRjaCAoZXJyb3IpIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoJ0hlYWx0aCBjaGVjayBmYWlsZWQ6JywgZXJyb3IpO1xyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufTsgIl0sIm5hbWVzIjpbIkFQSV9VUkwiLCJtb2NrUmVzcG9uc2VzIiwic2VuZE1lc3NhZ2UiLCJtZXNzYWdlIiwic2Vzc2lvbklkIiwibWVzc2FnZXMiLCJtZXNzYWdlSGlzdG9yeSIsIm1hcCIsIm1zZyIsInJvbGUiLCJjb250ZW50IiwicGF5bG9hZCIsInNlc3Npb25faWQiLCJ1bmRlZmluZWQiLCJzdHJlYW0iLCJyZXNwb25zZSIsImZldGNoIiwibWV0aG9kIiwiaGVhZGVycyIsImJvZHkiLCJKU09OIiwic3RyaW5naWZ5IiwiZXJyb3IiLCJjb25zb2xlIiwibW9ja1Jlc3BvbnNlIiwiTWF0aCIsImZsb29yIiwicmFuZG9tIiwibGVuZ3RoIiwiZW5jb2RlciIsIlRleHRFbmNvZGVyIiwiUmVhZGFibGVTdHJlYW0iLCJzdGFydCIsImNvbnRyb2xsZXIiLCJzZXRUaW1lb3V0IiwiZW5xdWV1ZSIsImVuY29kZSIsImNsb3NlIiwiUmVzcG9uc2UiLCJzdGF0dXMiLCJjaGVja0hlYWx0aCIsInNpZ25hbCIsIkFib3J0U2lnbmFsIiwidGltZW91dCIsImRhdGEiLCJqc29uIl0sImlnbm9yZUxpc3QiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(app-pages-browser)/./services/api.ts\n"));

/***/ })

});